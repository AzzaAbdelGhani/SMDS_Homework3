lrt.ci1 <- c(lrt.ci1, uniroot(function(x) -log_lik_weibull_profile_v(y,x) + weib.y.mle$value + qchisq(conf.level,1)/2,
c(weib.y.mle$par[2], 200))$root)
segments(lrt.ci1[1],-qchisq(conf.level,1)/2, lrt.ci1[1],
-log_lik_weibull_profile_v(y, lrt.ci1[1]), col="red", lty = 2)
segments(lrt.ci1[2],-qchisq(conf.level,1)/2, lrt.ci1[2],
-log_lik_weibull_profile_v(y, lrt.ci1[2]), col="red", lty = 2)
points(lrt.ci1[1], -qchisq(0.95,1)/2, pch = 16, col = 2, cex = 1.5)
points(lrt.ci1[2], -qchisq(0.95,1)/2, pch = 16, col = 2, cex = 1.5)
segments( lrt.ci1[1], -8.1,
lrt.ci1[2],
-8.1, col="red", lty = 1, lwd = 2)
text(155, -7.5, "95% Deviance CI", col = 2)
#true mean
theta_sample <- 2
#likelihood variance
sigma2 <- 2
#sample size
n <- 10
#prior mean
mu <- 7
#prior variance
tau2 <- 2
#generate some data
set.seed(123)
y <- rnorm(n,theta_sample, sqrt(sigma2))
#posterior mean
mu_star <- ((1/tau2)*mu+(n/sigma2)*mean(y))/( (1/tau2)+(n/sigma2))
#posterior standard deviation
sd_star <- sqrt(1/( (1/tau2)+(n/sigma2)))
# No conjugate Prior
library(rstan)
#launch Stan model
data<- list(N=n, y=y, sigma =sqrt(sigma2), mu = mu, tau = sqrt(tau2))
fit <- stan(file="files/normal.stan",
data = data, chains = 4, iter=2000)
#input values
#true mean
theta_sample <- 2
#likelihood variance
sigma2 <- 2
#sample size
n <- 15
#prior mean
mu <- 7
#prior variance
tau2 <- 2
#generate some data
set.seed(123)
y <- rnorm(n,theta_sample, sqrt(sigma2))
#posterior mean
mu_star <- ((1/tau2)*mu+(n/sigma2)*mean(y))/( (1/tau2)+(n/sigma2))
#posterior standard deviation
sd_star <- sqrt(1/( (1/tau2)+(n/sigma2)))
curve(dnorm(x, theta_sample, sqrt(sigma2/n)),xlim=c(-4,15), lty=2, lwd=1, col="black", ylim=c(0,1.4),
ylab="density", xlab=expression(theta))
curve(dnorm(x, mu, sqrt(tau2) ), xlim=c(-4,15), col="red", lty=1,lwd=2,  add =T)
curve(dnorm(x, mu_star, sd_star),
xlab=expression(theta), ylab="", col="blue", lwd=2, add=T)
legend(8.5, 0.7, c("Prior", "Likelihood", "Posterior"),
c("red", "black", "blue", "grey" ), lty=c(1,2,1),lwd=c(1,1,2), cex=1)
#input values
#true mean
theta_sample <- 2
#likelihood variance
sigma2 <- 2
#sample size
n <- 15
#prior mean
mu <- 7
#prior variance
tau2 <- 2
#generate some data
set.seed(123)
y <- rnorm(n,theta_sample, sqrt(sigma2))
#posterior mean
mu_star <- ((1/tau2)*mu+(n/sigma2)*mean(y))/( (1/tau2)+(n/sigma2))
#posterior standard deviation
sd_star <- sqrt(1/( (1/tau2)+(n/sigma2)))
curve(dnorm(x, theta_sample, sqrt(sigma2/n)),xlim=c(-4,15), lty=2, lwd=1, col="black", ylim=c(0,1.4),
ylab="density", xlab=expression(theta))
curve(dnorm(x, mu, sqrt(tau2) ), xlim=c(-4,15), col="red", lty=1,lwd=2,  add =T)
curve(dnorm(x, mu_star, sd_star),
xlab=expression(theta), ylab="", col="blue", lwd=2, add=T)
legend(8.5, 0.7, c("Prior", "Likelihood", "Posterior"),
c("red", "black", "blue", "grey" ), lty=c(1,2,1),lwd=c(1,1,2), cex=1)
<<<<<<< HEAD
y<-c(155.9, 200.2, 143.8, 150.1, 152.1, 142.2, 147, 146, 146,
170.3, 148, 118, 144, 97)
n <-  length(y)
log_lik_weibull <- function( data, param){
-sum(dweibull(data, shape = param[1], scale = param[2], log = TRUE))
}
weib.y.mle<-optim(c(1,1),fn=log_lik_weibull,hessian=T,
method='L-BFGS-B',lower=rep(1e-7,2),
upper=rep(Inf,2),data=y)
gamma <- seq(0.1, 15, length=100)
beta <- seq(100,200, length=100)
weib.y.mle$par
y<-c(155.9, 200.2, 143.8, 150.1, 152.1, 142.2, 147, 146, 146,
170.3, 148, 118, 144, 97)
n <-  length(y)
log_lik_weibull <- function( data, param){
-sum(dweibull(data, shape = param[1], scale = param[2], log = TRUE))
}
weib.y.mle<-optim(c(1,1),fn=log_lik_weibull,hessian=T,
method='L-BFGS-B',lower=rep(1e-7,2),
upper=rep(Inf,2),data=y)
gamma <- seq(0.1, 15, length=100)
beta <- seq(100,200, length=100)
weib.y.mle$par
?uniroot
#uniroot(function(x) cos(x) - x, lower = -pi, upper = pi, tol = 1e-9)$root
log_lik_weibull_profile  <- function(data, beta) {
gamma.beta <- uniroot(function(x) n/x - n * log(beta) + sum(log(data)) - sum((data/beta)^x * log(data/beta)), c(1e-5,15))$root
log_lik_weibull(data, c(gamma.beta, beta))
}
#log_lik_weibull_profile(data=y, beta=6.80) # it looks like working
log_lik_weibull_profile_v <-Vectorize(log_lik_weibull_profile, 'beta'  )
plot(function(x) -log_lik_weibull_profile_v(data = y, x) + weib.y.mle$value,
from = 120, to = 200,
xlab = expression(beta),
ylab = 'profile relative log likelihood',
ylim = c(-10,0))
conf.level <- 0.95
abline(h = -qchisq(conf.level,1)/2, lty = 'dashed', col = 2)
lrt.ci1 <- uniroot(function(x) -log_lik_weibull_profile_v(y, x) + weib.y.mle$value + qchisq(conf.level,1)/2,
c(1e-7, weib.y.mle$par[2]))$root
lrt.ci1 <- c(lrt.ci1, uniroot(function(x) -log_lik_weibull_profile_v(y,x) + weib.y.mle$value + qchisq(conf.level,1)/2,
c(weib.y.mle$par[2], 200))$root)
segments(lrt.ci1[1],-qchisq(conf.level,1)/2, lrt.ci1[1],
-log_lik_weibull_profile_v(y, lrt.ci1[1]), col="red", lty = 2)
segments(lrt.ci1[2],-qchisq(conf.level,1)/2, lrt.ci1[2],
-log_lik_weibull_profile_v(y, lrt.ci1[2]), col="red", lty = 2)
points(lrt.ci1[1], -qchisq(0.95,1)/2, pch = 16, col = 2, cex = 1.5)
points(lrt.ci1[2], -qchisq(0.95,1)/2, pch = 16, col = 2, cex = 1.5)
segments( lrt.ci1[1], -8.1,
lrt.ci1[2],
-8.1, col="red", lty = 1, lwd = 2)
text(155, -7.5, "95% Deviance CI", col = 2)
}
plot(function(x) -log_lik_weibull_profile_v(data = y, x) + weib.y.mle$value,
from = 120, to = 200,
xlab = expression(beta),
ylab = 'profile relative log likelihood',
ylim = c(-10,0))
library(LearnBayes)
data(soccergoals)
y <- soccergoals$goals
#write the likelihood function via the gamma distribution
lik_pois<- function(data, theta){
n <- length(data)
lambda <- exp(theta)
dgamma(lambda, shape =sum(data)+1, scale=1/n)
}
prior_gamma <- function(par, theta){
lambda <- exp(theta)
dgamma(lambda, par[1], rate=par[2])*lambda
}
prior_norm <- function(npar, theta){
lambda=exp(theta)
(dnorm(theta, npar[1], npar[2]))
}
lik_pois_v <- Vectorize(lik_pois, "theta")
prior_gamma_v <- Vectorize(prior_gamma, "theta")
prior_norm_v <- Vectorize(prior_norm, "theta")
#likelihood
curve(lik_pois_v(theta=x, data=y), xlim=c(-1,4), xlab=expression(theta), ylab = "density", lwd =2 )
#prior 1
curve(prior_gamma_v(theta=x, par=c(2, 4)), lty =2, col="red", add = TRUE, lwd =2)
#prior 2
curve(prior_norm_v(theta=x, npar=c(1, .5)), lty =3, col="blue", add =TRUE, lwd=2)
#prior 3
curve(prior_norm_v(theta=x, npar=c(2, .5)), lty =4, col="green", add =TRUE, lwd =2)
#prior 4
curve(prior_norm_v(theta=x, npar=c(1, 2)), lty =5, col="violet", add =TRUE, lwd =2)
legend(2.6, 1.8, c("Lik.", "Prior 1: Ga(2,4)", "Prior 2: N(1, 0.25)", "Prior 3: N(2,0.25)","Prior 4: N(1, 4)" ),
lty=c(1,2,3,4,5), col=c("black", "red", "blue", "green", "violet"),lwd=2, cex=0.9)
logpoissongamma <- function(theta, datapar){
data <- datapar$data
par <- datapar$par
lambda <- exp(theta)
log_lik <- log(lik_pois(data, theta))
log_prior <- log(prior_gamma(par, theta))
return(log_lik+log_prior)
}
logpoissongamma.v <- Vectorize( logpoissongamma, "theta")
logpoissonnormal <- function( theta, datapar){
data <- datapar$data
npar <- datapar$par
lambda <- exp(theta)
log_lik <- log(lik_pois(data, theta))
log_prior <- log(prior_norm(npar, theta))
return(log_lik+log_prior)
}
logpoissonnormal.v <- Vectorize( logpoissonnormal, "theta")
#log-likelihood
curve(log(lik_pois(y, theta=x)), xlim=c(-1,4),ylim=c(-20,2), lty =1,
ylab="log-posteriors", xlab=expression(theta))
#log posterior 1
curve(logpoissongamma.v(theta=x, list(data=y, par=c(2, 4))), col="red", xlim=c(-1,4),ylim=c(-20,2), lty =1, add =TRUE)
#log posterior 2
curve(logpoissonnormal.v( theta=x, datapar <- list(data=y, par=c(1, .5))), lty =1, col="blue",  add =TRUE)
#log posterior 3
curve(logpoissonnormal.v( theta=x, datapar <- list(data=y, par=c(2, .5))), lty =1, col="green", add =TRUE, lwd =2)
#log posterior 4
curve(logpoissonnormal.v( theta=x, list(data=y, par=c(1, 2))), lty =1, col="violet", add =TRUE, lwd =2)
legend(2.6, 1.3, c( "loglik", "lpost 1", "lpost 2", "lpost 3", "lpost 4" ),
lty=1, col=c("black", "red", "blue", "green", "violet"),lwd=2, cex=0.9)
datapar <- list(data=y, par=c(2, 4))
fit1 <- laplace(logpoissongamma, .5, datapar)
datapar <- list(data=y, par=c(1, .5))
fit2 <- laplace(logpoissonnormal, .5, datapar)
datapar <- list(data=y, par=c(2, .5))
fit3 <- laplace(logpoissonnormal, .5, datapar)
datapar <- list(data=y, par=c(1, 2))
fit4 <- laplace(logpoissonnormal, .5, datapar)
postmode <- c(fit1$mode, fit2$mode, fit3$mode, fit4$mode )
postsds <- sqrt(c(fit1$var, fit2$var, fit3$var, fit4$var))
logmarg <- c(fit1$int, fit2$int, fit3$int, fit4$int)
cbind(postmode, postsds, logmarg)
library(LearnBayes)
data(soccergoals)
y <- soccergoals$goals
#write the likelihood function via the gamma distribution
lik_pois<- function(data, theta){
n <- length(data)
lambda <- exp(theta)
dgamma(lambda, shape =sum(data)+1, scale=1/n)
}
prior_gamma <- function(par, theta){
lambda <- exp(theta)
dgamma(lambda, par[1], rate=par[2])*lambda
}
prior_norm <- function(npar, theta){
lambda=exp(theta)
(dnorm(theta, npar[1], npar[2]))
}
lik_pois_v <- Vectorize(lik_pois, "theta")
prior_gamma_v <- Vectorize(prior_gamma, "theta")
prior_norm_v <- Vectorize(prior_norm, "theta")
#likelihood
curve(lik_pois_v(theta=x, data=y), xlim=c(-1,4), xlab=expression(theta), ylab = "density", lwd =2 )
#prior 1
curve(prior_gamma_v(theta=x, par=c(2, 4)), lty =2, col="red", add = TRUE, lwd =2)
#prior 2
curve(prior_norm_v(theta=x, npar=c(1, .5)), lty =3, col="blue", add =TRUE, lwd=2)
#prior 3
curve(prior_norm_v(theta=x, npar=c(2, .5)), lty =4, col="green", add =TRUE, lwd =2)
#prior 4
curve(prior_norm_v(theta=x, npar=c(1, 2)), lty =5, col="violet", add =TRUE, lwd =2)
legend(2.6, 1.8, c("Lik.", "Prior 1: Ga(2,4)", "Prior 2: N(1, 0.25)", "Prior 3: N(2,0.25)","Prior 4: N(1, 4)" ),
lty=c(1,2,3,4,5), col=c("black", "red", "blue", "green", "violet"),lwd=2, cex=0.9)
version
SE_boot <- sd(s_vect)
knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/', fig.height = 10, fig.width = 10)
=======
dim(posterior)
dimnames(posterior)
library(bayesplot)
mcmc_intervals(posterior, pars = c("theta"))
plot_title <- ggtitle("Posterior distributions",
"with mean and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8,
point_est = "mean") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with mean and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8,
point_est = "median") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with mean and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.5,
point_est = "median") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with mean and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8,
point_est = "median") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.5,
point_est = "median") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8,
point_est = "median") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8,
prob_outer = 0.90,
point_est = "median") + plot_title
#histogram of theta parameter
mcmc_hist(posterior, pars = c("theta"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8,
prob_outer = 0.85,
point_est = "median") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8,
prob_outer = 0.8,
point_est = "median") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8,
prob_outer = 0.99,
point_est = "median") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8,
point_est = "median") + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = "theta",
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "median") + plot_title
>>>>>>> 74ed8c7be07ea2d8b96d78143a23ceeaa7919fc7
library(MASS)
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
<<<<<<< HEAD
#loading data
score <- read.table("files/student_score.txt", header = TRUE)
# function fo compute the parameter of interest --> eignratio
psi_fun <- function(data) {eig <- eigen(cor(data))$values
return(max(eig) / sum(eig))}
psi_obs <- psi_fun(score)
#psi_obs
# estimate the bootstrap-based standard error, SE_boot:
# and estimate the Standard error from each bootstrap sample using jackknife:
n <- nrow(score)
B <- 10^4
s_vect <- rep(0,B)
SE_jack <- rep(0,B)
s_tmp <- rep(0, n)
for(i in 1:B)
{
ind <- sample(1:n, n, replace = TRUE)
s_vect[i] <- psi_fun(score[ind,])
for(j in 1:n) {s_tmp[j] <- psi_fun(score[ind,][-j,])}
SE_jack[i] <- sqrt(((n - 1)/n) * sum((s_tmp - mean(s_tmp))^2))
}
#loading data
score <- read.table("files/student_score.txt", header = TRUE)
# function fo compute the parameter of interest --> eignratio
psi_fun <- function(data) {eig <- eigen(cor(data))$values
return(max(eig) / sum(eig))}
psi_obs <- psi_fun(score)
#psi_obs
# estimate the bootstrap-based standard error, SE_boot:
# and estimate the Standard error from each bootstrap sample using jackknife:
n <- nrow(score)
B <- 10^4
s_vect <- rep(0,B)
SE_jack <- rep(0,B)
s_tmp <- rep(0, n)
for(i in 1:B)
{
ind <- sample(1:n, n, replace = TRUE)
s_vect[i] <- psi_fun(score[ind,])
for(j in 1:n) {s_tmp[j] <- psi_fun(score[ind,][-j,])}
SE_jack[i] <- sqrt(((n - 1)/n) * sum((s_tmp - mean(s_tmp))^2))
}
SE_boot <- sd(s_vect)
wald_ci <- psi_obs + c(-1, 1) * 1.96 * SE_boot
print("Wald-type confidence interval :")
wald_ci
hist.scott(s_vect, main = "Wald-type CI")
abline(v = psi_obs, col = 2)
abline(v = wald_ci, col = "blue")
#percentile method :
perc_ci <- quantile(s_vect, prob=c(0.025, 0.975))
attr(perc_ci, "names") <- NULL
perc_ci
hist.scott(s_vect, main = "Percentile method")
abline(v = psi_obs, col = 2)
abline(v = perc_ci, col = "blue")
#studentized Method
z_vect <- (s_vect - psi_obs)/SE_jack
#studentized bootstrap confidence interval :
stud_ci <- psi_obs - SE_boot * quantile(z_vect, prob=c(0.975, 0.025))
attr(stud_ci, "names") <- NULL
print("Studentized bootstrap confidence interval :")
stud_ci
hist.scott(s_vect, main = "Studentized method")
abline(v = psi_obs, col = 2)
abline(v = stud_ci, col = "blue")
=======
library(LearnBayes)
summary(sim$theta)
y=c(1,0,0,1,0,0,0,0,0,1,0,0,1,0)
n <-  length(y)
heads <- sum(y == 1)
tails <- n - heads
alpha = 3
beta = 3
data<- list(N=n, y=heads, alpha=alpha, beta=beta)
fit <- stan(file="files/beta-binomial.stan", data = data, chains = 4, iter=2000,refresh=-1)
library(rstan)
y=c(1,0,0,1,0,0,0,0,0,1,0,0,1,0)
n <-  length(y)
heads <- sum(y == 1)
tails <- n - heads
alpha = 3
beta = 3
data<- list(N=n, y=heads, alpha=alpha, beta=beta)
fit <- stan(file="files/beta-binomial.stan", data = data, chains = 4, iter=2000,refresh=-1)
#extract the Stan output
sim <- extract(fit)
library(LearnBayes)
summary(sim$theta)
var(sim$theta)
posterior <- as.matrix(fit)
#traceplot
traceplot(fit, pars ="theta")
mcmc_intervals(posterior, pars = c("theta"))
library(LearnBayes)
library(bayesplot)
summary(sim$theta)
var(sim$theta)
posterior <- as.matrix(fit)
#traceplot
traceplot(fit, pars ="theta")
mcmc_intervals(posterior, pars = c("theta"))
plot_title <- ggtitle("Posterior distributions","with medians and 80% intervals")
mcmc_areas(posterior, pars = c("theta"), prob = 0.8) + plot_title
library(LearnBayes)
library(bayesplot)
summary(sim$theta)
var(sim$theta)
posterior <- as.matrix(fit)
#traceplot
traceplot(fit, pars ="theta")
mcmc_intervals(posterior, pars = c("theta"))
plot_title <- ggtitle("Posterior distributions","with medians and 80% intervals")
mcmc_areas(posterior, pars = c("theta"), prob = 0.8) + plot_title
>>>>>>> 74ed8c7be07ea2d8b96d78143a23ceeaa7919fc7
library(MASS)
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
y<-c(155.9, 200.2, 143.8, 150.1, 152.1, 142.2, 147, 146, 146,
170.3, 148, 118, 144, 97)
n <-  length(y)
log_lik_weibull <- function( data, param){
-sum(dweibull(data, shape = param[1], scale = param[2], log = TRUE))
}
weib.y.mle<-optim(c(1,1),fn=log_lik_weibull,hessian=T,
method='L-BFGS-B',lower=rep(1e-7,2),
upper=rep(Inf,2),data=y)
gamma <- seq(0.1, 15, length=100)
beta <- seq(100,200, length=100)
#weib.y.mle$par
log_lik_weibull_profile  <- function(data, beta) {
gamma.beta <- uniroot(function(x) n/x - n * log(beta) + sum(log(data)) - sum((data/beta)^x * log(data/beta)), c(1e-5,15))$root
log_lik_weibull(data, c(gamma.beta, beta))
}
log_lik_weibull_profile_v <-Vectorize(log_lik_weibull_profile, 'beta'  )
plot(function(x) -log_lik_weibull_profile_v(data = y, x) + weib.y.mle$value,
from = 120, to = 200,
xlab = expression(beta),
ylab = 'profile relative log likelihood',
ylim = c(-10,0))
conf.level <- 0.95
abline(h = -qchisq(conf.level,1)/2, lty = 'dashed', col = 2)
lrt.ci1 <- uniroot(function(x) -log_lik_weibull_profile_v(y, x) + weib.y.mle$value + qchisq(conf.level,1)/2,
c(1e-7, weib.y.mle$par[2]))$root
lrt.ci1 <- c(lrt.ci1, uniroot(function(x) -log_lik_weibull_profile_v(y,x) + weib.y.mle$value + qchisq(conf.level,1)/2,
c(weib.y.mle$par[2], 200))$root)
segments(lrt.ci1[1],-qchisq(conf.level,1)/2, lrt.ci1[1],
-log_lik_weibull_profile_v(y, lrt.ci1[1]), col="red", lty = 2)
segments(lrt.ci1[2],-qchisq(conf.level,1)/2, lrt.ci1[2],
-log_lik_weibull_profile_v(y, lrt.ci1[2]), col="red", lty = 2)
points(lrt.ci1[1], -qchisq(0.95,1)/2, pch = 16, col = 2, cex = 1.5)
points(lrt.ci1[2], -qchisq(0.95,1)/2, pch = 16, col = 2, cex = 1.5)
segments( lrt.ci1[1], -8.1,
lrt.ci1[2],
-8.1, col="red", lty = 1, lwd = 2)
text(155, -7.5, "95% Deviance CI", col = 2)
cat("Confidence interval is:",lrt.ci1[1],lrt.ci1[2])
